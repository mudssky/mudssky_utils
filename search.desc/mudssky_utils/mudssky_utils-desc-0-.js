searchState.loadedDescShard("mudssky_utils", 0, "Array utility functions\nAsync utilities module\nBytes utilities module\nEnvironment detection utilities\nError handling utilities\nFunction utilities module\nLanguage utilities for type checking and value inspection\nLogging utilities\nMath utilities for random number generation and array …\nNumber utility functions similar to JavaScript number …\nObject utilities for manipulation and transformation\nObject utility functions similar to JavaScript object …\nRegular expression utilities and common patterns\nString utility functions for various string operations\nError types for array operations\nSplits a vector into chunks of the specified size.\nConcatenate multiple arrays Similar to JavaScript’s …\nCounts occurrences of items based on a key function.\nReturns elements from the first slice that don’t exist …\nCheck if every element matches the predicate Similar to …\nFilter elements that match the predicate Similar to …\nFind the first element that matches the predicate Similar …\nFind the index of the first element that matches the …\nGets the first element of a slice, or returns the default …\nFlatten nested arrays by one level Similar to JavaScript’…\nSplits a slice into two vectors based on a condition.\nReturns the argument unchanged.\nCheck if array includes a specific element Similar to …\nFind the index of a specific element Similar to JavaScript…\nCalls <code>U::from(self)</code>.\nJoin array elements into a string with separator Similar …\nGets the last element of a slice, or returns the default …\nTransform each element using the provided function Similar …\nFinds the maximum element in a slice.\nFinds the minimum element in a slice.\nCreates a range of integers from start to end (exclusive) …\nReduce the array to a single value Similar to JavaScript’…\nReverse the array and return a new vector Similar to …\nShuffles a slice randomly.\nGet a slice of the array from start to end Similar to …\nCheck if some elements match the predicate Similar to …\nSums all elements in a slice.\nSums all numeric elements in a slice directly.\nReturns unique elements from a slice.\nCreates an asynchronous delay function\nByte unit types\nBytes utility struct for conversion and formatting\nError types for bytes operations\nOptions for byte formatting\nConvenience function for byte conversion\nConvert between number and string representation\nConvert string to number\nFormat a number as byte string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the multiplier for this unit\nCreate a new Bytes instance\nParse a byte string to number\nParse byte string to number\nEnvironment information structure\nReturns the argument unchanged.\nGet all environment variables\nGet cache directory path\nGet config directory path\nGet the number of CPU cores\nGet current working directory\nGet data directory path\nGet environment variable\nGet environment variable with default value\nGet comprehensive environment information\nGet home directory path\nGet the number of physical CPU cores\nGet temporary directory path\nCheck if environment variable exists\nCalls <code>U::from(self)</code>.\nCheck if running on 32-bit architecture\nCheck if running on 64-bit architecture\nCheck if running in CI environment\nCheck if running in debug mode\nCheck if running on Linux\nCheck if running on macOS\nCheck if running in release mode\nCheck if running on Unix-like system\nCheck if running on Windows\nExecute code only on specific operating system\nExecute code only on Unix-like systems\nExecute code only on Windows\nArgument error for invalid function arguments\nConfiguration error for configuration-related issues\nContains the error value\nNetwork error for network-related operations\nContains the success value\nParse error for parsing operations\nGeneric utility error that can wrap other errors\nResult type alias for utils operations\nValidation error for data validation failures\nCreate an argument error\nCreate a config error\nGet what was expected\nGet the field name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the input that failed to parse\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the configuration key\nGet the error message\nGet the error message\nGet the error message\nCreate a network error\nCreate a new ArgumentError\nCreate a new ValidationError\nCreate a new ConfigError\nCreate a new NetworkError\nCreate a new ParseError\nGet the operation name\nCreate a parse error\nGet the position where parsing failed\nGet the status code if available\nCreate a validation error\nGet the invalid value if available\nCreate a new ParseError with position\nCreate a new NetworkError with status code\nCreate a new ValidationError with the invalid value\nDebounce options\nDebounce controller\nError types for function utilities\nGeneral error\nPolling controller\nPolling error\nPolling options\nPolling status\nRetry exhausted error\nRetry options\nThrottle options\nThrottle controller\nTimeout error\nCancel the debouncer\nCancel the throttler\nDelay between retries\nExecute a function with debouncing\nExecute a function with throttling\nCurrent execution count\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to execute immediately\nPolling interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether polling is active\nCheck if debouncer is pending\nExecute on leading edge\nExecute on leading edge\nMaximum number of executions\nMaximum number of retries on error\nMaximum number of retries\nCreate a new debouncer\nCreate a new throttler\nCreate a new poller\nWhether to quit on error after max retries\nCurrent retry count\nStart polling with a task and stop condition\nGet polling status\nStop polling\nExecute on trailing edge\nExecute on trailing edge\nExecute a function with retry logic\nGet the type name of a value\nCheck if a string contains only alphabetic characters\nCheck if a string contains only alphanumeric characters\nCheck if a value is empty\nCheck if a HashMap is empty\nCheck if a HashSet is empty\nCheck if a string is empty\nCheck if a vector is empty\nCheck if two values are equal\nCheck if a string is a valid identifier (starts with …\nCheck if a value is None\nCheck if a string contains only digits\nCheck if a value is Some\nCheck if a number is zero\nCheck if a number is zero\nConsole output\nJSON formatter\nLog entry structure\nLog formatter trait\nLog levels in order of severity\nLog output trait\nLogger implementation\nLogger configuration\nSimple text formatter\nCreate a logger with custom configuration\nLog a debug message\nLog an error message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate or get a logger by name\nLog an info message\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a log level is enabled\nLog a message at the specified level\nLog a message with metadata\nCreate a new log entry\nCreate a new logger configuration\nCreate a new logger\nSet the global log level for all loggers\nLog a trace message\nLog a warning message\nSet the formatter\nSet the log level\nAdd metadata to the log entry\nAdd multiple metadata entries\nCreate a logger with default configuration\nSet the output\nErrors that can occur during math operations\nReturns the argument unchanged.\nGet a random item from an array\nCalls <code>U::from(self)</code>.\nGenerate a random integer in the range [start, end)\nGenerate a random integer in the range [0, max)\nDivision by zero\nInvalid number format\nError type for number operations\nNumber out of range\nClamp a number between min and max values Similar to CSS …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if a number is finite Similar to JavaScript’s …\nCheck if a number is an integer Similar to JavaScript’s …\nCheck if a number is NaN Similar to JavaScript’s …\nCheck if a number is a safe integer Similar to JavaScript…\nLinear interpolation between two values Common in …\nMap a value from one range to another Common in data …\nGet the maximum safe integer value Similar to JavaScript’…\nGet the minimum safe integer value Similar to JavaScript’…\nGet negative infinity Similar to JavaScript’s …\nParse a string to a float Similar to JavaScript’s …\nParse a string to an integer with specified radix Similar …\nGet positive infinity Similar to JavaScript’s …\nConvert number to exponential notation Similar to …\nConvert number to fixed decimal places Similar to …\nConvert number to precision notation Similar to JavaScript…\nErrors that can occur during object operations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInvert the keys and values of a JSON object\nMap object keys using a transformation function\nMap object values using a transformation function\nRecursively merge multiple JSON objects\nOmit specified keys from a JSON object\nOmit keys from a JSON object based on a predicate function\nPick specified keys from a JSON object\nPick keys from a JSON object based on a predicate function\nRemove non-serializable properties from a JSON value\nSafely stringify a JSON value to string\nInvalid operation\nKey not found in object\nError type for object operations\nAssign properties from source maps to target map Similar …\nDeep clone a nested HashMap structure Similar to lodash’…\nGet all key-value pairs from a HashMap Similar to …\nReturns the argument unchanged.\nCreate a HashMap from key-value pairs Similar to JavaScript…\nCheck if a HashMap has a specific key Similar to JavaScript…\nCalls <code>U::from(self)</code>.\nCheck if a HashMap is empty Similar to lodash’s …\nGet all keys from a HashMap Similar to JavaScript’s …\nMerge multiple HashMaps into a new one Similar to …\nOmit specific keys from a HashMap Similar to lodash’s …\nPick specific keys from a HashMap Similar to lodash’s …\nGet the size/length of a HashMap Similar to JavaScript’s …\nGet all values from a HashMap Similar to JavaScript’s …\nPassword strength analysis\nCommon regex patterns\nAnalyze password strength\nCalculate password strength level (0-4)\nExtract all matches from text using a regex pattern\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the global regex patterns instance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if string is a negative number\nCheck if string is a positive number\nValidate credit card number\nValidate email address\nValidate email address (supports Chinese characters)\nValidate hex color code\nValidate IPv4 address\nValidate IPv6 address\nValidate Chinese mobile phone number\nValidate US phone number\nValidate URL\nValidate username (4-16 characters, alphanumeric, …\nCheck if text matches pattern\nReplace all matches in text using a regex pattern\nSplit text by regex pattern\nErrors that can occur during string operations\nConvert string to camelCase\nCapitalize the first character of a string\nGet character at specified index Similar to JavaScript’s …\nConvert string to dash-case\nCheck if string ends with specified substring Similar to …\nReturns the argument unchanged.\nPerform fuzzy matching on strings (case-insensitive)\nGenerate all possible case combinations for letters in a …\nGenerate a random base62 string of specified length\nGenerate merge paths from a list of branches\nGenerate a UUID v4 string\nExtract file extension from filename\nCheck if string includes specified substring Similar to …\nCalls <code>U::from(self)</code>.\nPad string to the right with specified character to reach …\nPad string to the left with specified character to reach …\nParse template string and replace placeholders with data\nConvert string to PascalCase\nRemove prefix from string if it exists\nRepeat string n times Similar to JavaScript’s …\nReplace all occurrences of search string with replacement …\nConvert string to snake_case\nSplit string by separator and return vector of strings …\nCheck if string starts with specified substring Similar to …\nGet substring from start index to end index Similar to …\nTrim specified characters from both ends of a string\nTrim specified characters from the end of a string\nTrim specified characters from the start of a string")